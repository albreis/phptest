<?php 
error_reporting(E_ALL);
ini_set('display_errors', E_ALL);
$varname = time();
@list(${"{$varname}_script"}, ${"{$varname}_path"}, ${"{$varname}_vendor_path"}) = $argv;
${"{$varname}_vendor_path"} = str_replace('--vendor=', '', ${"{$varname}_vendor_path"});
if(empty(${"{$varname}_vendor_path"})) { ${"{$varname}_vendor_path"} = 'vendor/autoload.php'; }
if (file_exists(${"{$varname}_vendor_path"})) { require ${"{$varname}_vendor_path"}; }
${"{$varname}_path"} = ${"{$varname}_path"} ?? '.';
${"{$varname}_rii"} = new RecursiveIteratorIterator(new RecursiveDirectoryIterator(${"{$varname}_path"}));
${"{$varname}_files"} = [];
${"{$varname}_classes"} = [];
${"{$varname}_tmp_dir"} = dirname(__FILE__) . '/tmp';
if(!file_exists(${"{$varname}_tmp_dir"})) { mkdir(${"{$varname}_tmp_dir"}, 0755, true); }
${"{$varname}_errors"} = 0;
set_error_handler(function() {}); 
set_exception_handler(function() {});
require __DIR__ . '/helpers.php';
foreach(${"{$varname}_rii"} as ${"{$varname}_file"}) {
  if(!${"{$varname}_file"}->isDir()) {
    require ${"{$varname}_file"}->getPathname();
    ${"{$varname}_files"}[] = ${"{$varname}_file"}->getPathname();
    ${"{$varname}_contents"} = file_get_contents(${"{$varname}_file"}->getPathname());
    preg_match_all('/\@test[\s]+(.*)/', ${"{$varname}_contents"}, ${"{$varname}__matches"});
    defined('TESTED_CLASS_DIR') || define('TESTED_CLASS_DIR', realpath(dirname(${"{$varname}_file"}->getPathname())));
    $basedir = TESTED_CLASS_DIR;
    if(isset(${"{$varname}__matches"}[1])) {
      foreach(${"{$varname}__matches"}[1] as ${"{$varname}__test_key"} => ${"{$varname}_test"}) {
        ${"{$varname}_tmp_name"} = md5(microtime());
        ${"{$varname}_tmp"} = "{${"{$varname}_tmp_dir"}}/test-{${"{$varname}_tmp_name"}}.php";          
        file_put_contents(${"{$varname}_tmp"}, "<?php {${"{$varname}_test"}};");
        ob_start();
        try {
          ${"{$varname}_result"} = require ${"{$varname}_tmp"};
        }
        catch(Exception | ErrorException | Error | ArgumentCountError | ArithmeticError | AssertionError | DivisionByZeroError | CompileError | ParseError | TypeError $e) {
          ${"{$varname}_result"} = $e->getMessage();
        }
        ob_end_clean();
        $ln = 0;
        foreach(file(${"{$varname}_file"}) as $ln => $line) {
          if(stripos($line, ${"{$varname}_test"}) !== false) break;
        }
        $ln++;
        echo "File: ".realpath(${"{$varname}_file"})."\n";
        echo "Line: {$ln}\n";
        echo "Test: {${"{$varname}_test"}}\n";
        echo "Return: "; var_dump(${"{$varname}_result"});
        echo "Status: " . (${"{$varname}_result"} === true ? 'Success' : 'Failed');
        echo "\n\n";
        unlink(${"{$varname}_tmp"});
        if(${"{$varname}_result"} !== true) {
          ${"{$varname}_errors"}++;
        }
      }
    }
    preg_match_all('/\@test_using[\s]+(.*)/', ${"{$varname}_contents"}, ${"{$varname}__matches"});
    if(isset(${"{$varname}__matches"}[1])) {
      foreach(${"{$varname}__matches"}[1] as ${"{$varname}__test_key"} => ${"{$varname}_test"}) {
        ${"{$varname}_tmp_name"} = md5(microtime());
        ${"{$varname}_tmp"} = "{${"{$varname}_tmp_dir"}}/test-{${"{$varname}_tmp_name"}}.php";          
        file_put_contents(${"{$varname}_tmp"}, file_get_contents($basedir . '/' . ${"{$varname}_test"}));
        ob_start();
        try {
          ${"{$varname}_result"} = require ${"{$varname}_tmp"};
        }
        catch(Exception | ErrorException | Error | ArgumentCountError | ArithmeticError | AssertionError | DivisionByZeroError | CompileError | ParseError | TypeError $e) {
          ${"{$varname}_result"} = $e->getMessage();
        }
        ob_end_clean();
        $ln = 0;
        foreach(file(${"{$varname}_file"}) as $ln => $line) {
          if(stripos($line, ${"{$varname}_test"}) !== false) break;
        }
        $ln++;
        echo "File: ".realpath(${"{$varname}_file"})."\n";
        echo "Line: {$ln}\n";
        echo "Test using: {$basedir}/{${"{$varname}_test"}}\n";
        echo "Source: \n---------\n" . file_get_contents($basedir . '/' . ${"{$varname}_test"}) . "\n---------\n";
        echo "Return: "; var_dump(${"{$varname}_result"});
        echo "Status: " . (${"{$varname}_result"} === true ? 'Success' : 'Failed');
        echo "\n\n";
        unlink(${"{$varname}_tmp"});
        if(${"{$varname}_result"} !== true) {
          ${"{$varname}_errors"}++;
        }
      }
    }
  }
}
if(${"{$varname}_errors"}) {
  exit("\033[31m There is something wrong! Try review your code.\033[0m\n");
}
exit("\033[92m Congratulations! All tests are passed.\033[0m\n");